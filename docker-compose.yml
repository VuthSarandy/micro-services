#1st
#version: '3'
#services:
#  config-server:
#    build:
#      context: ./config-server
#      dockerfile: Dockerfile
#    container_name: config-server
#    ports:
#      - "8888:8888"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_URI=http://localhost:8888
#    networks:
#      - microservices-network
#
#  eureka-server:
#    build:
#      context: ./eureka-server
#      dockerfile: Dockerfile
#    container_name: eureka-server
#    ports:
#      - "8989:8989"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_URI=http://config-server:8888
#    depends_on:
#      - config-server
#    networks:
#      - microservices-network
#
#  user-service:
#    build:
#      context: ./user-service
#      dockerfile: Dockerfile
#    container_name: user-service
#    ports:
#      - "1680:1680"
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
#    depends_on:
#      - config-server
#      - eureka-server
#    networks:
#      - microservices-network
##  oauth2:
##    build:
##      context: ./oauth2
##      dockerfile: Dockerfile
##    container_name: oauth2-server
##    ports:
##      - "8080:8080"
##    environment:
##      - CONFIG_SERVER_URI=http://config-server:8888
##      - EUREKA_SERVER_URI=http://eureka-server:8761/eureka
##    depends_on:
##      - config-server
##      - eureka-server
##    networks:
##      - microservices-network
#  mongodb:
#    image: "mongo:7.0.12-rc1-jammy"
#    container_name: "mongodb"
#    ports:
#      - "27024:27017"
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=seu
#      - MONGO_INITDB_ROOT_PASSWORD=seu
#    restart: always
#    volumes:
#      - course_mongodb_data_vol:/data/db/
#      - course_mongodb_log_vol:/var/log/mongodb/
#    networks:
#      - microservices-network
#
#volumes:
#  course_mongodb_data_vol:
#  course_mongodb_log_vol:
#
#networks:
#  microservices-network:
#    driver: bridge


#2nd
#version: '3'
#services:
#  config-server:
#    build:
#      context: ./config-server
#      dockerfile: Dockerfile
#    container_name: config-server
#    ports:
#      - "8888:8888"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_URI=http://localhost:8888
#    networks:
#      - microservices-network
#    depends_on:
#      mongodb:
#        condition: service_healthy
#
#  eureka-server:
#    build:
#      context: ./eureka-server
#      dockerfile: Dockerfile
#    container_name: eureka-server
#    ports:
#      - "8989:8989"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_URI=http://config-server:8888
#    depends_on:
#      - config-server
#      - mongodb
#    networks:
#      - microservices-network
#
#  user-service:
#    build:
#      context: ./user-service
#      dockerfile: Dockerfile
#    container_name: user-service
#    ports:
#      - "1680:1680"
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
#    depends_on:
#      - config-server
#      - eureka-server
#      - mongodb
#    networks:
#      - microservices-network
#
#  mongodb:
#    image: "mongo:7.0.12-rc1-jammy"
#    container_name: "mongodb"
#    ports:
#      - "27024:27017"
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=seu
#      - MONGO_INITDB_ROOT_PASSWORD=seu
#    restart: always
#    volumes:
#      - course_mongodb_data_vol:/data/db/
#      - course_mongodb_log_vol:/var/log/mongodb/
#    networks:
#      - microservices-network
#    healthcheck:
#      test: [ "CMD", "echo", "db.runCommand({ ping: 1 })", "|", "mongo", "--username=seu", "--password=seu" ]
#      interval: 20s
#      timeout: 10s
#      retries: 5
#
#
#
#volumes:
#  course_mongodb_data_vol:
#  course_mongodb_log_vol:
#
#networks:
#  microservices-network:
#    driver: bridge
#

#3rd
version: '3'
services:
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8989:8989"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URI=http://config-server:8888
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 5

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URI=http://localhost:8888
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "1680:1680"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network

  mongodb:
    image: "mongo:7.0.12-rc1-jammy"
    container_name: "mongodb"
    ports:
      - "27024:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=sarandy
      - MONGO_INITDB_ROOT_PASSWORD=sarandy
    restart: always
    volumes:
      - course_mongodb_data_vol:/data/db/
      - course_mongodb_log_vol:/var/log/mongodb/
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "echo", "db.runCommand({ ping: 1 })", "|", "mongo", "--username=sarandy", "--password=sarandy"]
      interval: 20s
      timeout: 10s
      retries: 5

volumes:
  course_mongodb_data_vol:
  course_mongodb_log_vol:

networks:
  microservices-network:
    driver: bridge

